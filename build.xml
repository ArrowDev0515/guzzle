<?xml version="1.0" encoding="UTF-8"?>
<project name="guzzle" default="test">

    <property name="dir.output" value="${project.basedir}/build/artifacts" />
    <property name="dir.imports" value="${project.basedir}/phing/imports" />
    <property name="dir.bin" value="${project.basedir}/bin" />
    <property name="repo.dir" value="${project.basedir}" />

    <target name="clean">
        <delete dir="${dir.output}"/>
        <delete dir="${project.basedir}/build/pearwork"/>
        <mkdir dir="${dir.output}"/>
    </target>

    <target name="test" description="Run unit tests">
        <exec passthru="true" command="vendor/bin/phpunit" checkReturn="true" />
    </target>

    <target name="coverage">
        <exec passthru="true" command="vendor/bin/phpunit --coverage-html=${dir.output}/coverage" />
    </target>

    <target name="view-coverage">
        <exec passthru="true" command="open ${dir.output}/coverage/index.html" />
    </target>

    <property name="git.status" value=""/>
    <property name="git.currentbranch" value=""/>
    <target name="check-git-branch-status">
        <exec command="git status -s -b" outputProperty="git.currentbranch" />
        <if>
            <equals arg1="${git.currentbranch}" arg2="## ${head}" trim="true"/>
            <then>
                <echo>On branch ${head}</echo>
            </then>
            <else>
                <fail message="-Dhead=${head} arg did not match ${git.currentbranch}"/>
            </else>
        </if>
        <exec command="git status -s" outputProperty="git.status" />
        <if>
            <equals arg1="${git.status}" arg2="" trim="true"/>
            <then>
                <echo>working directory clean</echo>
            </then>
            <else>
                <echo>${git.status}</echo>
                <fail message="Working directory isn't clean." />
            </else>
        </if>
    </target>

    <property name="version.changelog" value=""/>
    <property name="version.version" value=""/>
    <target name="check-changelog-version">
        <exec executable="fgrep" outputProperty="version.changelog">
            <arg value="${new.version} ("/>
            <arg value="${project.basedir}/CHANGELOG.md"/>
        </exec>
        <if>
            <equals arg1="${version.changelog}" arg2="" trim="true"/>
            <then>
                <fail message="${new.version} not mentioned in CHANGELOG"/>
            </then>
        </if>

        <exec executable="fgrep" outputProperty="version.version">
            <arg value="const VERSION = '${new.version}'"/>
            <arg value="${project.basedir}/src/Guzzle/Common/Version.php"/>
        </exec>
        <if>
            <equals arg1="${version.version}" arg2="" trim="true"/>
            <then>
                <fail message="${new.version} not mentioned in Guzzle\Common\Version"/>
            </then>
        </if>

        <echo>ChangeLog Match: ${version.changelog}</echo>
        <echo>Guzzle\Common\Version Match: ${version.version}</echo>
    </target>

    <target name="release" depends="check-changelog-version,check-git-branch-status"
            description="phing -Dnew.version=[TAG] -Dhead=[BRANCH] release">
        <if>
            <isset property="new.version" />
            <then>
                <if>
                    <contains string="${new.version}" substring="v" casesensitive="false" />
                    <then>
                        <fail message="Please specify version as [0-9].[0-9].[0-9]. (I'll add v for you.)"/>
                    </then>
                    <else>
                        <echo>BEGINNING RELEASE FOR ${new.version}</echo>
                    </else>
                </if>
            </then>
        </if>
    </target>

    <target name="package-phar" description="Create a phar with an autoloader">
        <pharpackage
                destfile="${dir.output}/guzzle.phar"
                basedir="${project.basedir}/.subsplit"
                stub="phar-stub.php"
                signature="md5">
            <fileset dir="${project.basedir}/.subsplit">
                <include name="src/**/*.php" />
                <include name="src/**/*.pem" />
                <include name="src/**/*.md5" />
                <include name="vendor/symfony/class-loader/Symfony/Component/ClassLoader/UniversalClassLoader.php" />
                <include name="vendor/symfony/event-dispatcher/**/*.php" />
            </fileset>
            <metadata>
                <element name="author" value="Michael Dowling" />
            </metadata>
        </pharpackage>
        <exec command="php -d guzzle_phar=${dir.output}/guzzle.phar `which phpunit`" passthru="true" />
    </target>

</project>
